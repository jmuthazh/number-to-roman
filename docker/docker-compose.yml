version: '3.8'

services:

  otel-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - "4317:4317"  # OTLP gRPC receiver
      - "55681:55681"  # Prometheus metrics
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel/config.yaml
    command: [ "--config", "/etc/otel/config.yaml" ]
    networks:
      - monitoring


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    hostname: prometheus
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:9090/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    hostname: grafana
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
    container_name: elasticsearch
    networks:
      - monitoring
    environment:
      - bootstrap.memory_lock=true
      - node.name=elasticsearch
      - cluster.name=elk-cluster
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  filebeat:
    user: root
    image: docker.elastic.co/beats/filebeat:7.17.22
    links:
      - logstash:logstash
    container_name: filebeat
    volumes:
      - /var/run/docker.sock:/host_docker/docker.sock
      - /var/lib/docker:/host_docker/var/lib/docker
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/share/filebeat/logs:ro
    command: ["--strict.perms=false"]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    stdin_open: true
    tty: true
    deploy:
      mode: global
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - monitoring
    depends_on:
      - logstash
    healthcheck:
      test: ["CMD-SHELL", "filebeat test output || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.22
    container_name: logstash
    networks:
      - monitoring
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=changeme
      - XPACK_MONITORING_ELASTICSEARCH_USERNAME=elastic
      - XPACK_MONITORING_ELASTICSEARCH_PASSWORD=changeme
    ports:
      - "5044:5044"  # Beats
      - "5000:5000"  # Logstash TCP input
    volumes:
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/templates/logstash.template.json:/usr/share/logstash/templates/logstash.template.json
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.22
    container_name: kibana
    networks:
      - monitoring
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED=true
      - XPACK_MONITORING_COLLECTION_ENABLED=true
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/ || exit 1" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 1m
    networks:
      - monitoring
  db:
    image: postgres:latest
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sonar -d sonarqube -h localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - monitoring

  app:
    build:
      context: ../
      dockerfile: docker/spring-boot/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SONAR_HOST_URL=http://sonarqube:9000
    restart: on-failure
    networks:
      - monitoring
    volumes:
      - sonar-data:/usr/src/app
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      otel-collector:
        condition: service_started
      sonarqube:
        condition: service_started

  sonar-runner:
    image: maven:3.8.1-openjdk-17
    container_name: sonar-runner
    volumes:
      - sonar-data:/usr/src/app # Mount the shared volume
    working_dir: /usr/src/app
    environment:
      SONAR_TOKEN: ${SONAR_TOKEN}
    command: [ "/bin/bash", "-c", "./run-sonar.sh" ]
    depends_on:
      sonarqube:
        condition: service_healthy
    networks:
      - monitoring
volumes:
  grafana-storage:
  es_data:
  sonar-data:
  sonarqube_db_data:
  sonarqube_data:

networks:
  monitoring:
    driver: bridge

